local resources = {}

local characterDir = "res/char/"
local levelDir = "res/levels/"

function resources.loadCharacter(characterName)
	local characterPath = characterDir .. characterName .. "/char.lua"
	if love.filesystem.exists(characterPath) then
		-- Use pcall to run the character Lua code of level files without
		-- crashing the game if there are errors.
		local ok, characterFile = pcall(love.filesystem.load, characterPath)

		if not ok then
			return nil, string.format(
				'Error loading character "%s": %s',
				characterName,
				tostring(characterFile)
			)
		else
			local ok, character = pcall(characterFile)

			if not ok then
				return nil, string.format(
					'Error loading character "%s": %s',
					characterName,
					tostring(character)
				)
			else
				return character
			end
		end
	else
		return nil, string.format('Character "%s" not found', characterName)
	end
end

function resources.loadSprite(characterName, spriteName)
	local spritePath = characterDir .. characterName .. "/" .. spriteName
	if love.filesystem.exists(spritePath) then
		return love.graphics.newImage(spritePath)
	else
		return nil, string.format('Sprite "%s" not found', spriteName)
	end
end

-- TODO: Levels can be zip files as well as folders.
function resources.loadLevel(levelName)
	local levelPath = levelDir .. levelName .. "/level.lua"
	if love.filesystem.exists(levelPath) then
		-- Level files are actually Lua files generated by Tiled. Use pcall to
		-- run the Lua code of level files without crashing the game if there
		-- are errors.
		local ok, levelFile = pcall(love.filesystem.load, levelPath)
		if not ok then
			return nil, string.format(
				'Error loading level "%s": %s',
				levelName,
				levelFile
			)
		end

		local ok, levelContents = pcall(levelFile)
		if not ok then
			return nil, string.format(
				'Error loading level "%s": %s',
				levelName,
				levelContents
			)
		end

		return levelContents
	else
		return nil, string.format('Level "%s" not found.', levelName)
	end
end

function resources.loadTileset(levelName)
	levelTilesetPath = levelDir .. levelName .. "/tiles.png"
	rootTilesetPath = levelDir .. "tiles.png"
	if love.filesystem.exists(levelTilesetPath) then
		return love.graphics.newImage(levelTilesetPath)
	elseif love.filesystem.exists(rootTilesetPath) then
		return love.graphics.newImage(rootTilesetPath)
	else
		return nil, 'No tilesets found'
	end
end

function resources.loadMusic(levelName)
	local musicPath = levelDir .. levelName .. '/music.ogg'
	if love.filesystem.exists(musicPath) then
		return love.audio.newSource(musicPath)
	else
		return nil, string.format('Music "%s" not found', musicPath)
	end
end

return resources
