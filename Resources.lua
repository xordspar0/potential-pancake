local resources = {}

local characterDir = "res/char/"
local levelDir = "res/levels/"

function resources.loadCharacter(characterName)
	local characterPath = characterDir .. characterName .. "/char.lua"
	if not love.filesystem.exists(characterPath) then
		error("Character " .. characterName .. " not found.")
	else
		-- Use pcall to run the character Lua code of level files without
		-- crashing the game if there are errors.
		local ok, characterFile = pcall(love.filesystem.load, characterPath)

		if not ok then
			error("There was an error when loading character "
				  .. characterName .. ": " .. tostring(characterFile))
		else
			local ok, character = pcall(characterFile)

			if not ok then
				error("There was an error when reading character "
					  .. characterName .. ": " .. tostring(character))
			else
				return character
			end
		end
	end
end

function resources.loadsprite(characterName, spriteName)
	local spritePath = characterDir .. characterName .. "/" .. spriteName
	if not love.filesystem.exists(spritePath) then
		error("Image " .. spriteName .. " not found.")
	else
		return love.graphics.newImage(spritePath)
	end
end

-- TODO: Levels can be zip files as well as folders.
function resources.loadLevel(levelName)
	local levelPath = levelDir .. levelName .. "/level.lua"
	if not love.filesystem.exists(levelPath) then
		error("Level " .. levelName .. " not found.")
	else
		-- Level files are actually Lua files generated by Tiled. Use pcall to
		-- run the Lua code of level files without crashing the game if there
		-- are errors.
		local ok, levelFile = pcall(love.filesystem.load, levelPath)

		if not ok then
			error("There was an error when loading level "
				  .. levelName .. ": " .. tostring(levelFile))
		else
			local ok, levelContents = pcall(levelFile)

			if not ok then
				error("There was an error when reading level "
					  .. levelName .. ": " .. tostring(levelContents))
			else
				return levelContents
			end
		end
	end
end

-- TODO: Look up tilesets in multiple locations according to /docs/tilesets.md
function resources.loadTileset(levelName)
	local tilesetPath = levelDir .. levelName .. "/tiles.png"
	if not love.filesystem.exists(tilesetPath) then
		error("Tileset " .. levelName .. " not found.")
	else
		return love.graphics.newImage(tilesetPath)
	end
end

function resources.loadMusic(levelName)
	local musicPath = levelDir .. levelName .. "/music.ogg"
	if not love.filesystem.exists(musicPath) then
		error("Tileset " .. levelName .. " not found.")
	else
		return love.audio.newSource(musicPath)
	end
end

return resources
